---
dist: xenial
language: java
jdk: openjdk11

sudo: false

services:
  - docker

git:
  depth: false
  quiet: true

cache:
  directories:
    - ${HOME}/.m2/repository

# the cache can grow constantly
before_cache: bash scripts/travis/cleanup_cache.sh

branches:
  only:
    - master
    - /release\/.*/
    - /feature\/.*/
    - /fix\/.*/

env:
  global:
    - TAS_SCRIPTS=../alfresco-community-repo/packaging/tests/scripts
    - TAS_ENVIRONMENT=./tests/environment
    # Release version has to start with real version (7.2.0-....) for the docker image to build successfully.
    - RELEASE_VERSION=7.2.0
    - DEVELOPMENT_VERSION=23.1.0-A1-SNAPSHOT
    - DTAS_VERSION="${DTAS_VERSION:-v1.1}"
    - PYTHON_VERSION=3.7.12

stages:
  - name: test
    if: commit_message !~ /\[skip tests\]/
  - name: docker_latest
    if: commit_message !~ /\[skip docker_latest\]/ AND branch = master AND type != pull_request AND fork = false
  - name: docker_release
    if: commit_message !~ /\[skip docker_release\]/ AND branch =~ /release\/.*/ AND type != pull_request AND fork = false
  - name: release
    if: commit_message =~ /\[release\]/ AND (branch = master OR branch =~ /release\/.*/) AND type != pull_request AND fork = false
  - name: publish
    if: commit_message =~ /\[publish\]/ AND (branch = master OR branch =~ /release\/.*/) AND type != pull_request AND fork = false
  - name: update_downstream
    if: (commit_message =~ /\[downstream\]/ OR (commit_message =~ /\[release\]/ AND commit_message !~ /\[no downstream\]/)) AND (branch = master OR branch =~ /release\/.*/) AND type != pull_request AND fork = false

before_install: travis_retry bash scripts/travis/init.sh
install: travis_retry travis_wait 40 bash scripts/travis/build.sh

jobs:
  include:
    - name: "Source Clear Scan (SCA)"
      if: branch = master OR branch =~ /release\/.*/
      # Run Veracode
      install: skip
      script: travis_wait 30 bash scripts/travis/source_clear.sh

    - name: "REST API TAS tests part1"
      if: commit_message =~ /\[tas\]/
      before_script:
        - ${TAS_SCRIPTS}/start-compose.sh ${TAS_ENVIRONMENT}/docker-compose-rest-api-tests.yml
        - ${TAS_SCRIPTS}/wait-for-alfresco-start.sh "http://localhost:8082/alfresco"
      script:
        - travis_wait 60 mvn -B install -ntp -f tests/tas-restapi/pom.xml -Pall-tas-tests,run-restapi-part1 -Denvironment=default -DrunBugs=false

    - name: "REST API TAS tests part2"
      if: commit_message =~ /\[tas\]/
      before_script:
        - ${TAS_SCRIPTS}/start-compose.sh ${TAS_ENVIRONMENT}/docker-compose-rest-api-tests.yml
        - ${TAS_SCRIPTS}/wait-for-alfresco-start.sh "http://localhost:8082/alfresco"
      script:
        - travis_wait 60 mvn -B install -ntp -f tests/tas-restapi/pom.xml -Pall-tas-tests,run-restapi-part2 -Denvironment=default -DrunBugs=false

    - name: "REST API TAS tests part3"
      if: commit_message =~ /\[tas\]/
      before_script:
        - ${TAS_SCRIPTS}/start-compose.sh ${TAS_ENVIRONMENT}/docker-compose-rest-api-tests.yml
        - ${TAS_SCRIPTS}/wait-for-alfresco-start.sh "http://localhost:8082/alfresco"
      script:
        - travis_wait 60 mvn -B install -ntp -f tests/tas-restapi/pom.xml -Pall-tas-tests,run-restapi-part3 -Denvironment=default -DrunBugs=false

    - name: "CMIS TAS tests - BROWSER binding"
      if: commit_message =~ /\[tas\]/
      before_script:
        - ${TAS_SCRIPTS}/start-compose.sh ${TAS_ENVIRONMENT}/docker-compose-cmis-tests.yml
        - ${TAS_SCRIPTS}/wait-for-alfresco-start.sh "http://localhost:8082/alfresco"
      script:
        - travis_wait 40 mvn -B install -ntp -f tests/tas-cmis/pom.xml -Pall-tas-tests,run-cmis-browser -Denvironment=default -DrunBugs=false

    - name: "CMIS TAS tests - ATOM binding"
      if: commit_message =~ /\[tas\]/
      before_script:
        - ${TAS_SCRIPTS}/start-compose.sh ${TAS_ENVIRONMENT}/docker-compose-cmis-tests.yml
        - ${TAS_SCRIPTS}/wait-for-alfresco-start.sh "http://localhost:8082/alfresco"
      script:
        - travis_wait 40 mvn -B install -ntp -f tests/tas-cmis/pom.xml -Pall-tas-tests,run-cmis-atom -Denvironment=default -DrunBugs=false

    - name: "CMIS TAS tests - WEBSERVICES binding"
      if: commit_message =~ /\[tas\]/
      before_script:
        - ${TAS_SCRIPTS}/start-compose.sh ${TAS_ENVIRONMENT}/docker-compose-cmis-tests.yml
        - ${TAS_SCRIPTS}/wait-for-alfresco-start.sh "http://localhost:8082/alfresco"
      script:
        - travis_wait 40 mvn -B install -ntp -f tests/tas-cmis/pom.xml -Pall-tas-tests,run-cmis-webservices -Denvironment=default -DrunBugs=false

    - name: "Email TAS tests"
      if: commit_message =~ /\[tas\]/
      before_script:
        - ${TAS_SCRIPTS}/start-compose.sh ${TAS_ENVIRONMENT}/docker-compose-email-tests.yml
        - ${TAS_SCRIPTS}/wait-for-alfresco-start.sh "http://localhost:8082/alfresco"
      script:
        - travis_wait 30 mvn -B install -ntp -f tests/tas-email/pom.xml -Pall-tas-tests -Denvironment=default -DrunBugs=false

    - name: "WebDAV TAS tests"
      if: commit_message =~ /\[tas\]/
      before_script:
        - ${TAS_SCRIPTS}/start-compose.sh ${TAS_ENVIRONMENT}/docker-compose-minimal.yml
        - ${TAS_SCRIPTS}/wait-for-alfresco-start.sh "http://localhost:8082/alfresco"
      script:
        - travis_wait 20 mvn -B install -ntp -f tests/tas-webdav/pom.xml -Pall-tas-tests -Denvironment=default -DrunBugs=false

    - name: "Integration TAS tests"
      if: commit_message =~ /\[tas\]/
      before_script:
        - ${TAS_SCRIPTS}/start-compose.sh ${TAS_ENVIRONMENT}/docker-compose-integration-tests.yml
        - ${TAS_SCRIPTS}/wait-for-alfresco-start.sh "http://localhost:8082/alfresco"
      script:
        - travis_wait 30 mvn -B install -ntp -f tests/tas-integration/pom.xml -Pall-tas-tests -Denvironment=default -DrunBugs=false

    - name: "LDAP TAS tests"
      if: commit_message =~ /\[tas\]/
      before_script:
        - ${TAS_SCRIPTS}/start-compose.sh ${TAS_ENVIRONMENT}/docker-compose-with-ldap.yml
        - ${TAS_SCRIPTS}/wait-for-alfresco-start.sh "http://localhost:8082/alfresco"
      script:
        - travis_wait 60 mvn -B install -ntp -f tests/tas-restapi/pom.xml -Pall-tas-tests,run-restapi-ldap -Denvironment=default -DrunBugs=false
        - travis_wait 10 mvn -B install -ntp -f tests/tas-integration/pom.xml -Prun-ldap -Denvironment=default -DrunBugs=false

    - name: "REST API TAS tests with AIMS"
      if: commit_message !~ /\[skip tas\]/ AND fork = false # AIMS docker image requires access to quay.io
      before_script:
        # AIMS cannot be configured via localhost
        - export HOST_IP=$(hostname  -I | cut -f1 -d' ')
        - ${TAS_SCRIPTS}/start-compose.sh ${TAS_ENVIRONMENT}/docker-compose-aims.yml
        - ${TAS_SCRIPTS}/wait-for-alfresco-start.sh "http://localhost:8082/alfresco" 180
      script:
        - travis_wait 60 mvn -B install -ntp -f tests/tas-restapi/pom.xml -Pall-tas-tests,run-restapi-aims -Denvironment=aims-environment -DrunBugs=false "-Didentity-service.auth-server-url=http://${HOST_IP}:8999/auth"

    - name: "CMIS TAS tests with AIMS - BROWSER binding"
      if: commit_message !~ /\[skip tas\]/ AND fork = false # AIMS docker image requires access to quay.io
      before_script:
        # AIMS cannot be configured via localhost
        - export HOST_IP=$(hostname  -I | cut -f1 -d' ')
        - ${TAS_SCRIPTS}/start-compose.sh ${TAS_ENVIRONMENT}/docker-compose-aims.yml
        - ${TAS_SCRIPTS}/wait-for-alfresco-start.sh "http://localhost:8082/alfresco" 180
      script:
        - travis_wait 40 mvn -B install -ntp -f tests/tas-cmis/pom.xml -Pall-tas-tests,run-cmis-browser-with-aims -Denvironment=aims-environment -DrunBugs=false "-Didentity-service.auth-server-url=http://${HOST_IP}:8999/auth"

    - name: "CMIS TAS tests with AIMS - ATOM binding"
      if: commit_message !~ /\[skip tas\]/ AND fork = false # AIMS docker image requires access to quay.io
      before_script:
        # AIMS cannot be configured via localhost
        - export HOST_IP=$(hostname  -I | cut -f1 -d' ')
        - ${TAS_SCRIPTS}/start-compose.sh ${TAS_ENVIRONMENT}/docker-compose-aims.yml
        - ${TAS_SCRIPTS}/wait-for-alfresco-start.sh "http://localhost:8082/alfresco" 180
      script:
        - travis_wait 40 mvn -B install -ntp -f tests/tas-cmis/pom.xml -Pall-tas-tests,run-cmis-atom-with-aims -Denvironment=aims-environment -DrunBugs=false "-Didentity-service.auth-server-url=http://${HOST_IP}:8999/auth"

    - name: "Sync Service TAS tests"
      if: commit_message !~ /\[skip tas\]/
      before_script:
        - ${TAS_SCRIPTS}/start-compose.sh ${TAS_ENVIRONMENT}/docker-compose-sync-service.yml
        - ${TAS_SCRIPTS}/wait-for-alfresco-start.sh "http://localhost:8082/alfresco"
      script:
        - travis_wait 20 mvn -B install -ntp -f tests/tas-sync-service/pom.xml -Pall-tas-tests -Denvironment=default -DrunBugs=false

    - name: "Elasticsearch TAS tests"
      if: commit_message !~ /\[skip search\]/
      script:
       - travis_wait 30 mvn -B install -ntp -f tests/tas-elasticsearch/pom.xml -Pall-tas-tests,elastic -Denvironment=default -DrunBugs=false

    - name: "Elasticsearch Basic Auth TAS tests"
      if: commit_message !~ /\[skip search\]/
      script:
       - travis_wait 30 mvn -B install -ntp -f tests/tas-elasticsearch/pom.xml -Pall-tas-tests,elastic-basic-auth -Denvironment=default -DrunBugs=false

    - name: "All AMPs tests"
      before_script:
        - travis_retry travis_wait 20 mvn -B -q install -ntp -f tests/tas-all-amps/pom.xml -DskipTests -Pall-tas-tests,prepare-wars-with-amps
      script:
        - ./tests/scripts/checkLibraryDuplicates.sh ./tests/tas-all-amps/target/war/alfresco/WEB-INF/lib
        - ${TAS_SCRIPTS}/start-compose.sh ${TAS_ENVIRONMENT}/docker-compose-all-amps-test.yml
        - ${TAS_SCRIPTS}/wait-for-alfresco-start.sh "http://localhost:8082/alfresco"
        - travis_wait 20 mvn -B install -ntp -f tests/tas-all-amps/pom.xml -Pall-tas-tests -Denvironment=default -DrunBugs=false

    - name: "Distribution Zip content tests"
      before_script:
        - travis_retry travis_wait 20 mvn -B -V clean install -ntp -Pags -DskipTests -Dmaven.javadoc.skip=true
      script:
        - travis_wait 20 mvn -B install -ntp -f tests/tas-distribution-zip/pom.xml -Prun-distribution-zip-contents-check -DrunBugs=false

    # Test local repo and share docker images that will be used in the single pipeline. Tag:latest
    - name: "Single Pipeline image tests"
      if: fork = false AND type != pull_request
      before_script:
        - travis_retry travis_wait 20 mvn -B clean install -ntp -Ppipeline,build-docker-images $(mvn -B -q help:evaluate "-Dexpression=dependency.alfresco-enterprise-repo.version" -DforceStdout | grep -q '\-SNAPSHOT$' && echo '-Drepo.image.tag=latest') $(mvn -B -q help:evaluate "-Dexpression=dependency.alfresco-enterprise-share.version" -DforceStdout | grep -q '\-SNAPSHOT$' && echo '-Dshare.image.tag=latest')
        # Show what DTAS will be looking for
        - cat tests/pipeline-all-amps/repo/target/dtas/dtas-config.json
        - eval "$(pyenv init --path)" && pyenv install $PYTHON_VERSION
        - pyenv global $PYTHON_VERSION
        - python --version
        - pip install requests pytest==6.2.4 pytest-testinfra==6.3.0 jmespath==0.10.0
        - git clone --depth 1 --branch $DTAS_VERSION https://${GIT_USERNAME}:${GIT_PASSWORD}@github.com/Alfresco/alfresco-deployment-test-automation-scripts.git dtas
        - docker images | grep pipeline
      script:
        - ${TAS_SCRIPTS}/start-compose.sh ${TAS_ENVIRONMENT}/docker-compose-pipeline-all-amps.yml
        - ${TAS_SCRIPTS}/wait-for-alfresco-start.sh "http://localhost:8080/alfresco/" 180
        - docker ps
        # Show what AMPs the repo has installed
        - curl -v --user admin.pipeline@alfresco.com:admin http://localhost:8080/alfresco/api/discovery
        - cd dtas
        - pytest --configuration ../tests/pipeline-all-amps/repo/target/dtas/dtas-config.json tests/ -s

    - name: "Update latest and Single Pipeline <acs>-<build> images"
      stage: docker_latest
      script:
        - travis_retry travis_wait 30 mvn -B -V clean install -ntp -DskipTests -Dmaven.javadoc.skip=true -Dbuild-number=${TRAVIS_BUILD_NUMBER} -Pags -Ppush-docker-images,pipeline
        - bash scripts/travis/update_single_pipeline_reference.sh

    - name: "Update release and Single Pipeline <acs>-<build> images"
      stage: docker_release
      script: travis_retry travis_wait 30 mvn -B -V clean install -ntp -DskipTests -Dmaven.javadoc.skip=true -Dbuild-number=${TRAVIS_BUILD_NUMBER} -Ppush-docker-images,pipeline,release-branch

    - name: "Release and Copy to S3 Staging Bucket"
      stage: release
      before_script: bash scripts/travis/verify_release_tag.sh
      script: travis_wait 60 bash scripts/travis/maven_release.sh
      before_deploy: source scripts/travis/prepare_staging_deploy.sh
      deploy:
        - provider: s3
          access_key_id: "${AWS_STAGING_ACCESS_KEY}"
          secret_access_key: "${AWS_STAGING_SECRET_KEY}"
          bucket: "alfresco-artefacts-staging"
          region: "eu-west-1"
          # Once Travis releases their *dpl v2* api (currently in beta, check https://docs.travis-ci.com/user/deployment-v2#how-to-opt-in-to-v2)
          # the skip_cleanup option will no longer be needed (or valid) and should be removed (ACS-1155).
          skip_cleanup: true
          acl: private
          local_dir: "deploy_dir"
          upload_dir: "alfresco-content-services/release/${TRAVIS_BRANCH}/${TRAVIS_BUILD_NUMBER}"
          on:
            all_branches: true
        - provider: s3
          access_key_id: "${AWS_STAGING_ACCESS_KEY}"
          secret_access_key: "${AWS_STAGING_SECRET_KEY}"
          bucket: "alfresco-artefacts-staging"
          region: "eu-west-1"
          skip_cleanup: true
          acl: private
          local_dir: "deploy_dir_share"
          upload_dir: "share/${RELEASE_VERSION}"
          on:
            all_branches: true
        - provider: s3
          access_key_id: "${AWS_STAGING_ACCESS_KEY}"
          secret_access_key: "${AWS_STAGING_SECRET_KEY}"
          bucket: "alfresco-artefacts-staging"
          region: "eu-west-1"
          skip_cleanup: true
          acl: private
          local_dir: "deploy_dir_ags"
          upload_dir: "enterprise/RM/${RELEASE_VERSION}"
          on:
            all_branches: true
        - provider: script
          script: bash scripts/travis/copy_share_image_to_docker_hub.sh
          on:
            all_branches: true
      after_deploy:
        - echo "Finished release and deployed to https://s3.console.aws.amazon.com/s3/buckets/alfresco-artefacts-staging/alfresco-content-services/release/${TRAVIS_BRANCH}/${TRAVIS_BUILD_NUMBER}"

    - name: "Copy to S3 Release Bucket"
      stage: publish
      # We do not want to build/install the tip of the branch which will be a SNAPSHOT.
      install: skip
      script: travis_wait 60 bash scripts/travis/maven_publish.sh
      before_deploy: pip install awscli
      deploy:
        - provider: script
          script: bash scripts/travis/copy_to_release_bucket.sh
          on:
            all_branches: true
        - provider: script
          script: bash scripts/travis/copy_share_to_release_bucket.sh
          on:
            all_branches: true
        - provider: script
          script: bash scripts/travis/copy_ags_to_release_bucket.sh
          on:
            all_branches: true

    - name: "Update acs-community-packaging (after release)"
      stage: update_downstream
      install: skip
      script: bash scripts/travis/update_downstream.sh
