name: ACS Packaging CI

on:
  pull_request:
    branches:
      - feature/**
      - fix/**
      - master
      - release/**
  push:
    branches:
      - feature/**
      - fix/**
  workflow_call:
  workflow_dispatch:

env:
  AZURE_AUTHENTICATION_MODE: sharedKey
  AZURE_STORAGE_ACCOUNT_NAME: acspackagingci
  AZURE_STORAGE_ACCOUNT_KEY: ${{ secrets.AZURE_PACKAGING_STORAGE_ACCOUNT_KEY }}
  DOCKERHUB_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  DOCKERHUB_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  GITHUB_ACTIONS_DEPLOY_TIMEOUT: 60
  GIT_USERNAME: ${{ secrets.BOT_GITHUB_USERNAME }}
  GIT_EMAIL: ${{ secrets.BOT_GITHUB_EMAIL }}
  GIT_PASSWORD: ${{ secrets.BOT_GITHUB_TOKEN }}
  JIRA_TOKEN: ${{ secrets.JIRA_TOKEN }}
  MAVEN_PASSWORD: ${{ secrets.NEXUS_PASSWORD }}
  MAVEN_USERNAME: ${{ secrets.NEXUS_USERNAME }}
  QUAY_PASSWORD: ${{ secrets.QUAY_PASSWORD }}
  QUAY_USERNAME: ${{ secrets.QUAY_USERNAME }}
  AWS_REGION: eu-west-1
  TAS_ENVIRONMENT: ./tests/environment
  TAS_SCRIPTS: ../alfresco-community-repo/packaging/tests/scripts
  ALF_LICENCE_S3_PATH: s3://acs-license/acs/alf74-allenabled.lic
  ALF_LICENCE_LOCAL_PATH: /tmp/licence.lic
  PYTHON_VERSION: 3.7.15
  DTAS_VERSION: v1.1

jobs:
  tas_tests:
    env:
      JOB_NAME: ${{ matrix.testSuite }}
      BUILD_WEB_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
    name: ${{ matrix.testSuite }} TAS tests
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - testSuite: REST API part1
            pom-dir: tests/tas-restapi
            profiles: all-tas-tests,run-restapi-part1
            compose-file: docker-compose-rest-api-tests.yml
            deploy-timeout: 60
    steps:
      - uses: actions/checkout@v3
        with:
          persist-credentials: false
      - name: "Run tests"
        id: tests
        timeout-minutes: ${{ matrix.deploy-timeout }}
        run: exit 0
      - name: "Print output after failure"
        if: ${{ always() && steps.tests.outcome == 'failure' }}
        run: echo "TEST_FAILURE=true" >> $GITHUB_ENV
      - uses: actions/setup-python@v4
        if: always()
        with:
          python-version: "3.9"
          cache: "pip"
      - name: Install python dependencies
        if: always()
        run: pip install -r ./scripts/ci/requirements.txt
        shell: bash
      - name: Create jira issue
        if: always()
        run: ./scripts/ci/create_jira_issue.py
        shell: bash
      - name: "Clean Maven cache"
        run: bash ./scripts/ci/cleanup_cache.sh